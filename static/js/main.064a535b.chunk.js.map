{"version":3,"sources":["components/Buttons.js","components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Buttons","watchOn","handleReset","handleStart","waitButton","className","onClick","ref","Timer","time","addZero","seconds","Math","floor","slice","minutes","hours","App","useState","setTime","setWatchOn","useRef","useEffect","unsubscribe","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","current","click$","fromEvent","buffer","debounceTime","map","clicks","length","filter","clicksLength","_","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAiBeA,EAfC,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,QAAQC,EAAwC,EAAxCA,YAAYC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,WAC9C,OACI,sBAAKC,UAAW,WAAhB,UAEQJ,EACA,wBAAQI,UAAW,MAAOC,QAAUJ,EAApC,kBAEI,wBAAQG,UAAW,MAAOC,QAAUH,EAApC,mBAGR,wBAAQE,UAAW,MAAOC,QAASJ,EAAnC,mBACA,wBAAQG,UAAW,MAAOE,IAAKH,EAA/B,sBCMGI,EAlBD,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAENC,EAAU,SAACD,GACb,OAAOA,EAAO,GAAP,WAAgBA,GAAhB,UAA4BA,IAGjCE,EAAUD,EAAQE,KAAKC,MAAMJ,EAAQ,KAAKK,OAAO,GACjDC,EAAUL,EAAQE,KAAKC,MAAMJ,EAAO,IAAM,IAAIK,OAAO,GACrDE,EAAQN,EAAQE,KAAKC,MAAOJ,EAAQ,KAAQ,KAAKK,OAAO,GAE9D,OACI,sBAAKT,UAAW,eAAhB,UACI,sBAAMA,UAAW,UAAjB,SAA6BW,IADjC,YAEI,sBAAMX,UAAW,UAAjB,SAA6BU,IAFjC,YAGI,sBAAMV,UAAW,UAAjB,SAA6BM,QCmD1BM,MA5Df,WACI,MAAwBC,mBAAS,GAAjC,mBAAOT,EAAP,KAAaU,EAAb,KACA,EAA8BD,oBAAS,GAAvC,mBAAOjB,EAAP,KAAgBmB,EAAhB,KAEMhB,EAAaiB,mBA2CnB,OA1CAC,qBAAU,WAEN,IAAMC,EAAc,IAAIC,IAQxB,OAPAC,YAAS,KACJC,KAAKC,YAAUJ,IACfK,WAAU,WACH3B,GACAkB,GAAQ,SAAAU,GAAG,OAAIA,EAAM,QAG1B,WACHN,EAAYO,OACZP,EAAYQ,cAEjB,CAAC9B,IAEJqB,qBAAU,WAEN,GAAIlB,GAAeA,EAAW4B,QAA9B,CACA,IAAMC,EAASC,YAAU9B,EAAW4B,QAAS,SAExBC,EAChBP,KACGS,YAAOF,EAAOP,KAAKU,YAAa,OAChCC,aAAI,SAAAC,GAAM,OAAIA,EAAOC,UACrBC,aAAO,SAAAC,GAAY,OAAIA,GAAgB,MAGlCb,WAAU,SAAAc,GACnBtB,GAAW,SAEjB,CAAChB,IAYC,sBAAKC,UAAW,MAAhB,UACI,cAAC,EAAD,CAAOI,KAAMA,IACb,cAAC,EAAD,CACIR,QAASA,EACTC,YAVQ,WAChBiB,EAAQ,GACRC,GAAW,IASHjB,YAfQ,WAChBiB,GAAW,SAAAuB,GAAS,OAAKA,MAejBvC,WAAYA,QChDbwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.064a535b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Buttons = ({watchOn,handleReset,handleStart,waitButton}) => {\r\n    return (\r\n        <div className={'btnGroup'}>\r\n            {\r\n                watchOn ? (\r\n                <button className={'btn'} onClick={ handleReset}>Stop</button>\r\n                ) : (\r\n                    <button className={'btn'} onClick={ handleStart}>Start</button>\r\n                )\r\n            }\r\n            <button className={'btn'} onClick={handleReset}>reset</button>\r\n            <button className={'btn'} ref={waitButton}>wait</button>\r\n        </div>\r\n    )\r\n}\r\nexport default Buttons","import React from \"react\";\r\nconst Timer = ({time}) => {\r\n\r\n    const addZero = (time) => {\r\n        return time < 10 ? `0${time}` : `${time}`\r\n    }\r\n\r\n    const seconds = addZero(Math.floor(time  % 60)).slice(-2)\r\n    const minutes = addZero(Math.floor(time / 60) % 60).slice(-2)\r\n    const hours = addZero(Math.floor((time /  3600) % 24)).slice(-2)\r\n\r\n    return (\r\n        <div className={'displayBlock'}>\r\n            <span className={'display'}>{hours}</span>&nbsp;:&nbsp;\r\n            <span className={'display'}>{minutes}</span>&nbsp;:&nbsp;\r\n            <span className={'display'}>{seconds}</span>\r\n        </div>\r\n    )\r\n}\r\nexport default Timer","import './App.css';\nimport {buffer, debounceTime, filter, fromEvent, interval, map, Subject, takeUntil} from \"rxjs\";\nimport {useEffect, useRef, useState} from \"react\";\nimport Buttons from \"./components/Buttons\";\nimport Timer from \"./components/Timer\";\n\nfunction App() {\n    const [time, setTime] = useState(0);\n    const [watchOn, setWatchOn] = useState(false);\n\n    const waitButton = useRef()\n    useEffect(() => {\n\n        const unsubscribe = new Subject();\n        interval(1000)\n            .pipe(takeUntil(unsubscribe))\n            .subscribe(() => {\n                if (watchOn) {\n                    setTime(val => val + 1);\n                }\n            });\n        return () => {\n            unsubscribe.next();\n            unsubscribe.complete();\n        };\n    }, [watchOn]);\n\n    useEffect(() => {\n\n        if(!waitButton || !waitButton.current) return\n        const click$ = fromEvent(waitButton.current, 'click');\n\n        const doubleClick$ = click$\n            .pipe(\n                buffer(click$.pipe(debounceTime(300))),\n                map(clicks => clicks.length),\n                filter(clicksLength => clicksLength >= 2)\n            );\n\n        doubleClick$.subscribe(_ => {\n            setWatchOn(false);\n        });\n    },[waitButton])\n\n    const handleStart = () => {\n        setWatchOn(prevState => !prevState);\n    }\n\n    const handleReset = () => {\n        setTime(0);\n        setWatchOn(false);\n    }\n\n    return (\n        <div className={'App'}>\n            <Timer time={time}/>\n            <Buttons\n                watchOn={watchOn}\n                handleReset={handleReset}\n                handleStart={handleStart}\n                waitButton={waitButton}\n            />\n        </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}